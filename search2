/*The linear search starts at the first element and then sequentially searches each element of the array until it finds the value it is looking for. For an array of N elements, the linear search algorithm examines N/2 elements on average for value in the array, N elements for value not in the array while the time complexity of a binary search is log2N comparisons. A linear search does not require sorting the array before it searches an element.*/

//C++ code

#include <iostream>
using namespace std;

int linearS (const int[], int, int);

int main ()
{
    const int SIZE = 3;
    int tests[SIZE] = {70, 80, 90};
    int results;
    int value;

    cout << "Enter a test score out of 100 to be searched: " << endl;
    cin >> value;

    results = linearS(tests, SIZE, value);

    if(results == -1){
    
        cout << "You did not score a 100 on the test." << endl;
        
    }
    
    else{
    
        cout << "You earned a 100 points on the test." << endl;
        cout << "The position is found at" << results + 1 << endl;

    }

    return 0;
}

int linearS(const int arr[], int size, int value){

    int index = 0;
    int position = -1;
    bool found = false;

    while(index < size && !found){
    
        if(arr[index] == value){
            found = true;
            position = index;
            
        }
        
        index++;
    }
    
    return position;

}


//Python code

def linearSearch (list, key):

     for index in range (0,len(list)):
     
          if list[index] == key: 
              return index + 1 
              
     return None 

list1 = [] 
maximum = int(input("How many elements in your list? "))
print ("Enter each element and press enter: ")

for i in range (0, maximum):

     str = input()
     list1.append(str) 
     
print ("The List contents are: ", list1)

key = input ("Enter the number to be searched: ")
position = linearSearch (list1, key)

if position is None:
     print ("String", key, "is not present in the list")
     
else:
     print ("String", key, "is present at position", position)
